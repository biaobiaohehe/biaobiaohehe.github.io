<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Biao&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-15T08:24:46.289Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biaobiaohehe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些简单算法</title>
    <link href="http://yoursite.com/2018/03/14/%E4%B8%80%E4%BA%9B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/14/一些排序算法/</id>
    <published>2018-03-14T09:41:09.000Z</published>
    <updated>2018-03-15T08:24:46.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>思想：</p><blockquote><p> 对需要排序的数组从后往前多变扫描，也就是逆序扫描，如果发现被比较的元素必当前小<br>     则交换。</p></blockquote></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buble_sort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($arr);$i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($j=count($arr)<span class="number">-1</span>;$j&gt;$i;$j--)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($arr[$i] &gt; $arr[$j])&#123;</span><br><span class="line"></span><br><span class="line">$temp = $arr[$i];</span><br><span class="line"></span><br><span class="line">$arr[$i] = $arr[$j];</span><br><span class="line"></span><br><span class="line">$arr[$j] = $temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><blockquote><p>思想：</p><blockquote><p> 在数组中挑选出一个元素作为标准，扫描一遍，将比标准元素的小的放在左边，比标准元素大的放<br>    在右边，通过递归将各个更小序列直到所有序列一致。</p></blockquote></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($len &lt; <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag = $arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">$left_arr = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">$right_arr = arrar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;$len;$i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($flag &gt;= $arr[$i])&#123;</span><br><span class="line"></span><br><span class="line">$left_arr[]=$arr[$i];</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">$rignt_arr[]=$arr[$i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$left_arr = quick_sort($left_arr);</span><br><span class="line"></span><br><span class="line">$right_arr = quick_sort($right_arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array_merage($left_arr,<span class="keyword">array</span>($flag),$right_arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><blockquote><p>思想：</p><blockquote><p>如果说数据是按照升序排序的，对于要查询到的x，从序列中间开始查询，如果查询成功则返回，如果中间值比查找值小，则在后半段继续查找，否则就从前半段继续查找。</p></blockquote></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bin_search</span><span class="params">($arr,$x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$len = count($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($len&lt;=<span class="number">1</span> &amp;&amp; $x!=$arr[<span class="number">0</span>])&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">$half = intval($len/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($x == $arr[$half])&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">'ok'</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">elseif</span>($x &gt; $arr[$half])&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bin_serach(array_slice($arr,$half),$x);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bin_serach(array_slice($arr,<span class="number">0</span>,$half),$x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;思想：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 对需要排序的数组从后往前多变扫描，也就是逆序扫描
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>归并算法</title>
    <link href="http://yoursite.com/2018/03/08/article-title/"/>
    <id>http://yoursite.com/2018/03/08/article-title/</id>
    <published>2018-03-08T05:53:10.000Z</published>
    <updated>2018-03-14T09:28:56.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并算法"><a href="#归并算法" class="headerlink" title="归并算法"></a>归并算法</h1><blockquote><p>归并排序是建立在归并操作上的一种有效的排序算法。这个算法是采用分治法的一个非常典型的应用。<br>归并排序算法思想：分而治之</p><pre><code>1. 分解： 把长度为n的待排序分解成,两个长度n/2 的序列.2. 治理： 对每个子序列分别强调用归并排序，进行递归操作。           当子序列长度为1时，序列本身有序，停止递归.3. 合并： 合并每个排序好的字序列.</code></pre></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_arr</span><span class="params">($a,$b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count($a) &amp;&amp; count($b))&#123;</span><br><span class="line"></span><br><span class="line"> $c = $a[<span class="string">'0'</span>]&lt;$b[<span class="string">'0'</span>] : array_shift($a) ? array_shift($b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $c;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   $len = count($a);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>($len &lt; <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> $arr;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $mid = intavl($len/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   $left_arr = array_slice($arr,<span class="number">0</span>,$mid);</span><br><span class="line"></span><br><span class="line">   $right_arr = array_slice($arr,$mid);</span><br><span class="line"></span><br><span class="line">   $left_arr = merge_sort($left_arr);</span><br><span class="line"></span><br><span class="line">   $right_arr = merge_sort($rigt_ar);</span><br><span class="line"></span><br><span class="line">   $arr = merge_arr($left_arr,$right_arrr);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> $arr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">17</span>,<span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">   $arr = merge_sort($arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;归并算法&quot;&gt;&lt;a href=&quot;#归并算法&quot; class=&quot;headerlink&quot; title=&quot;归并算法&quot;&gt;&lt;/a&gt;归并算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法。这个算法是采用分治法的一个非常典型的应用。&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my-first-blog</title>
    <link href="http://yoursite.com/2017/11/26/my-first-blog/"/>
    <id>http://yoursite.com/2017/11/26/my-first-blog/</id>
    <published>2017-11-26T07:40:13.000Z</published>
    <updated>2017-11-26T07:40:13.116Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/26/hello-world/"/>
    <id>http://yoursite.com/2017/11/26/hello-world/</id>
    <published>2017-11-26T07:25:20.009Z</published>
    <updated>2017-11-26T07:25:20.009Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
